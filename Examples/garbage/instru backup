#include <string>
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <dirent.h>
#include "clang/AST/AST.h"
#include "clang/AST/ASTConsumer.h"
#include "clang/AST/ASTContext.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/Driver/Options.h"
#include "clang/Frontend/ASTConsumers.h"
#include "clang/Frontend/CompilerInstance.h"
#include "clang/Frontend/FrontendActions.h"
#include "clang/Rewrite/Core/Rewriter.h"
#include "clang/Tooling/CommonOptionsParser.h"
#include "clang/Tooling/Tooling.h"
#include "clang/AST/StmtIterator.h"
#include "clang/Lex/Lexer.h"

using namespace clang;
using namespace clang::tooling;

static llvm::cl::OptionCategory ToolingSampleCategory("Tooling Sample");
static llvm::cl::opt<std::string>  Output ("o", llvm::cl::desc("file Output"));
static llvm::cl::opt<int>  Lines ("l", llvm::cl::desc("number of statements"));

//Rewriter rewriter;
int exist = 0;
int nr_func = -1;
int ma = 0;
std::string funct_name;
std::vector<std::string> name_funcs;

//Number of lines of a function
int count_children(Stmt::const_child_iterator b, Stmt::const_child_iterator e){
  int a=0;
  for(Stmt::const_child_iterator it = b; it != e; it++){
    if(const Stmt *currStmt = *it){

      if(isa<CompoundStmt>(currStmt) || isa<IfStmt>(currStmt) || isa<ForStmt>(currStmt) || isa<WhileStmt>(currStmt)
        || isa<DoStmt>(currStmt) || isa<SwitchCase>(currStmt) || isa<SwitchStmt>(currStmt))
        a+= count_children(currStmt->child_begin(), currStmt->child_end());

      if(isa<DeclStmt>(currStmt)){
        const DeclStmt *child1 = cast<DeclStmt>(currStmt);
        if(child1->getDeclGroup().isSingleDecl()){
         const Decl *child2 = child1->getSingleDecl();
         if(isa<VarDecl>(child2)){
           const VarDecl *child3 = cast<VarDecl>(child2);
         //Check if the RAPL system already exists in the programme
           if(child3->getNameAsString() == "rapl")
            exist = 1;
        }
      }
    }

    a++;
  }
}
return a;
}

//Get the name of the file without his Path
std::string getFileName(std::string directory, std::string filePath){
  filePath.erase(0,directory.size());
  filePath.erase(0, 1);
  return filePath;
}

//checks if its header or a filesystem
int isHeaderFile(const FunctionDecl *FS, ASTContext *Context){
 SourceManager &srcMgr = Context->getSourceManager();
 std::string filename = FS->getLocStart().printToString(srcMgr);
 //std::cout << filename + "\n";
 if(!(filename.find(".h")!=std::string::npos) && !(filename.find("/usr/")!=std::string::npos))
  return 0;
else
  return 1;
}

//Put the name of the index and the name of the function in name_funcs for index.txt
void insertIntoIndex(const FunctionDecl *FS, ASTContext *Context){
  SourceManager &srcMgr = Context->getSourceManager();
  std::string filename = FS->getLocStart().printToString(srcMgr);
  /*getFileName(
    srcMgr.getFileEntryForID(srcMgr.getMainFileID())->getDir()->getName().str(),
    FS->getLocStart().printToString(srcMgr));
  */  
    nr_func++;
    std::string s = std::to_string(nr_func);
    s += ":"+ filename +":"+ FS->getNameInfo().getAsString();
    name_funcs.push_back(s); 
  }


  void insertRaplAfter(SourceLocation loc, Rewriter &rewriter){
    std::string s = std::to_string(nr_func);
    rewriter.InsertText(loc,"rapl_after("+s+",rapl);\n", true, true);
  }


  void insertRaplBefore(SourceLocation loc, Rewriter &rewriter){
    rewriter.InsertText(loc.getLocWithOffset(1),
      "\n \tCRapl rapl = create_rapl(0); \n\trapl_before(rapl);", true, true);
  }


  void insertBraces(Stmt *IforElse, Rewriter &rewriter, ASTContext *Context){
    SourceManager &srcMgr = Context->getSourceManager();
    bool invalid;

    CharSourceRange conditionRange = CharSourceRange::getTokenRange(IforElse->getLocStart(), IforElse->getLocStart());
    std::string str = clang::Lexer::getSourceText(conditionRange, srcMgr, Context->getLangOpts(), &invalid);

    if(!invalid && str.compare("{")){
      rewriter.InsertText(IforElse->getLocStart().getLocWithOffset(-1), "{\n", true, true);

      //IforElse->dump();
    //skip ';'
      str = srcMgr.getCharacterData(IforElse->getLocEnd(), &invalid);
      std::size_t found = str.find(";");
      if(rewriter.InsertText(IforElse->getLocEnd().getLocWithOffset(found+1), "\n}", true, true)){
        str = srcMgr.getCharacterData(IforElse->getLocStart(), &invalid);
        found = str.find(";");
        rewriter.InsertTextAfterToken(IforElse->getLocStart().getLocWithOffset(found+1), "\n}");
        //IforElse->dump();
      }
      
      //if(!std::strcmp(srcMgr.getCharacterData(IforElse->getLocEnd(), &invalid), " ")){
      //SourceRange rng(IforElse->getSourceRange());
      //int offset = clang::Lexer::MeasureTokenLength(rng.getEnd(), srcMgr, Context->getLangOpts()) + 1;
      //rewriter.InsertTextAfterToken(rng.getEnd().getLocWithOffset(offset), "\n}");
      //}
      /*else{
        int offset = clang::Lexer::MeasureTokenLength(IforElse->getLocEnd(), srcMgr, Context->getLangOpts()) + 1;
        rewriter.InsertText(IforElse->getLocEnd().getLocWithOffset(offset), "\n}", true, true);
      }*/
      }
    }

    std::size_t BottomCloser(SourceLocation st, SourceManager &srcMgr){
      bool invalid;
      std::string str = srcMgr.getCharacterData(st, &invalid);
      std::size_t foundComma = str.find_first_of(";");
      std::size_t foundBrace = str.find_first_of("}");
      //printf("Comma: %d  \n", foundComma);
      //printf("Brace: %d  \n", foundBrace);

      return foundComma < foundBrace ? foundComma : foundBrace;
    }

    std::size_t SearchCloser(SourceLocation st, SourceManager &srcMgr, std::string brace){
      bool invalid;
      std::string str = srcMgr.getCharacterData(st, &invalid);
      std::size_t foundComma = str.find_first_of(";");
      std::size_t foundBrace = str.find_first_of(brace);
      //printf("Comma: %d  \n", foundComma);
      //printf("Brace: %d  \n", foundBrace);

      return foundComma < foundBrace ? foundComma : foundBrace;
    }

    SourceLocation getPreviousLoc(const Stmt *Compou, const Stmt *Cl, SourceManager &srcMgr){
      SourceLocation aux = Compou->getLocStart();
      std::size_t found;

      if(isa<CompoundStmt>(Compou)){
        const CompoundStmt *cmp = cast<CompoundStmt>(Compou);
        if(cmp->body_front() == cmp->body_back()){
          //printf("cmp->body_front() == cmp->body_back()\n");
          found = SearchCloser(Compou->getLocStart(), srcMgr, "{");
          return Compou->getLocStart().getLocWithOffset(found+1);
        }
        if(Cl == cmp->body_front()){
          //printf("Cl == cmp->body_front()\n");
          found = SearchCloser(Compou->getLocStart(), srcMgr, "{");
          return Compou->getLocStart().getLocWithOffset(found+1);
        }


        Stmt::const_child_iterator b (Compou->child_begin());
        const Stmt *au;

        for(Stmt::const_child_iterator it = b; it != Compou->child_end(); it++){
          if(Cl == *it){
            //printf("Cl == *it\n");
            found = SearchCloser(au->getLocEnd(), srcMgr, "}");
            return au->getLocEnd().getLocWithOffset(found+1);;
          }
          au = *it;
        }
      }

      return aux;
    }




    const SourceRange CompareStmt(const Stmt *Compou, const Stmt *Cl, SourceManager &srcMgr){
      SourceRange rang (Cl->getLocStart(), Cl->getLocEnd());

      if(isa<CompoundStmt>(Compou)){
        const CompoundStmt *cmp = cast<CompoundStmt>(Compou);
        if(cmp->body_front() == cmp->body_back()){
          rang.setEnd(Cl->getLocEnd().getLocWithOffset(2));
          return rang;
        }
        if(Cl == cmp->body_back())
          return SourceRange();
        if(Cl == cmp->body_front()){
          return rang;
        }
      }  

      Stmt::const_child_iterator b (Compou->child_begin());

      const Stmt *aux;

      for(Stmt::const_child_iterator it = b; it != Compou->child_end(); it++){
        if(Cl == *b){
          rang.setBegin(Cl->getLocStart());
          //it++;
          //aux=*it;
          //rang.setEnd(aux->getLocStart());
          break;
        }
        if(Cl == *it){
          //bool invalid;
          //std::string str = srcMgr.getCharacterData(IforElse->getLocEnd(), &invalid);
          //std::size_t found = str.find(";");
          rang.setBegin(aux->getLocEnd().getLocWithOffset(2));
          //it++;
          //aux = *it;
          //bool invalid;
          //std::string str = srcMgr.getCharacterData(Cl->getLocEnd(), &invalid);
          //std::size_t found = str.find(";");
          //rang.setEnd(Cl->getLocEnd().getLocWithOffset(found+1));
          //rang.setEnd(aux->getLocStart());
          break;
        }
        aux = *it;
      }


      return rang;
    }



    /*Stmt *StmtGetCompound(Stmt *st, ASTContext *Context){

      return;
    }

    Stmt *DeclGetCompound(Decl *dc, ASTContext *Context){

      return;
    }*/

    /*void wrapCall(Expr *E, ASTContext *Context, Rewriter &rewriter){

     if(isa<CallExpr>(E) && cast<CallExpr>(E)->getDirectCallee()){
      const char *call_name = cast<CallExpr>(E)->getDirectCallee()->getNameInfo().getAsString().c_str();
      if(!strcmp(call_name, funct_name.c_str())){

        auto parent = Context->getParents(*E).begin();
        SourceRange rang(parent->getSourceRange());

        const Stmt *ST = parent->get<Stmt>();
        const Decl *DC = parent->get<Decl>();

        if(ST && !isa<CompoundStmt>(ST) && 
          (Context->getParents(*ST).begin())->get<Stmt>() &&
          !isa<CompoundStmt>((Context->getParents(*ST).begin())->get<Stmt>()))
          do{
            parent = Context->getParents(*ST).begin();
            ST = parent->get<Stmt>();
          }while(ST && !isa<CompoundStmt>((Context->getParents(*ST).begin())->get<Stmt>()));


          if(ST){
           if(isa<IfStmt>(ST) || isa<ForStmt>(ST) || isa<WhileStmt>(ST) ){
                //bool invalid;
                //SourceRange ran(ST->getLocEnd(), ST->getLocEnd());
                //ST->dump();
                //std::string str = Context->getSourceManager().getCharacterData(ST->getLocEnd(), &invalid);
                //std::size_t found = str.find(";");
            insertRaplAfter(ST->getLocStart(), rewriter);
            rewriter.InsertTextAfterToken(ST->getLocEnd().getLocWithOffset(2), "\n\trapl_before(rapl);\n");
                //rewriter.InsertText(E->getLocEnd().getLocWithOffset(found+2), "\nrapl_before(rapl);", true, true);
          }
          else if(isa<BinaryOperator>(ST)){
            insertRaplAfter(ST->getLocStart(), rewriter);
            rewriter.InsertText(ST->getLocEnd().getLocWithOffset(2), "\nrapl_before(rapl);", true, true);
          }
          else if(!isa<ReturnStmt>(ST)){
            insertRaplAfter(E->getLocStart(), rewriter);
            rewriter.InsertText(E->getLocEnd().getLocWithOffset(2), "\nrapl_before(rapl);", true, true);
          }
        } 
        else if(DC){
              //DC->dump();
          insertRaplAfter(rang.getBegin(), rewriter);
          rewriter.InsertText(E->getLocEnd().getLocWithOffset(2), "\nrapl_before(rapl);", true, true);
        }
      }
    }
  }*/
            /*SourceRange rang(parents->getSourceRange());

            SourceManager &srcMgr = Context->getSourceManager();
            parents->dump(llvm::outs(), srcMgr);

            bool invalid;
            E->dump();
            std::string str(srcMgr.getCharacterData(E->getLocStart(), &invalid));
            std::cout << str +"\n";
            insertRaplAfter(rang.getBegin(), rewriter);
            rewriter.InsertText(E->getLocEnd().getLocWithOffset(2), "\nrapl_before(rapl);", true, true);
            
            return false;
          }
          else return true;
       }
    }

    /*ast_type_traits::DynTypedNode * firstParent( ast_type_traits::DynTypedNode *p1, ASTContext *Context){
      const Stmt *st = p1->get<Stmt>();
      const Decl *dl = p1->get<Decl>();
      //dl->dump();
      

      return p1;
    }*/


      class RaplVisitor : public RecursiveASTVisitor<RaplVisitor> {  
      public:
        explicit RaplVisitor(ASTContext *Context, Rewriter &rewriter) : Context(Context), rewriter(rewriter)   {}

        bool TraverseDecl(Decl *D){
        //D->dump();
          RecursiveASTVisitor<RaplVisitor>::TraverseDecl(D);
        return true; // Return false to stop the AST analyzing
      }

      /*bool TraverseStmt(Stmt *S){
        //S->dump();
        RecursiveASTVisitor<RaplVisitor>::TraverseStmt(S);
        return true;
      }*/

        bool VisitFunctionDecl(FunctionDecl *FS){
          //FS->dump();
          ma=0;
          if(!isHeaderFile(FS, Context) && FS->isThisDeclarationADefinition()){
            funct_name = FS->getNameInfo().getName().getAsString();

            const Stmt *Bod = FS->getBody();
            //Bod->dump();
          //std::cout << FS->getLocStart().printToString(Context->getSourceManager()) + "\n";
            if(count_children(Bod->child_begin(), Bod->child_end()) >= Lines && !exist){
              insertIntoIndex(FS, Context);

          //Checks if it is the main function
              if(FS->isMain()){
                ma=1;
                rewriter.InsertText(Bod->getLocStart().getLocWithOffset(1),"\n \tinitMeasure();", true, true);
                insertRaplBefore(Bod->getLocStart(), rewriter);
              }
              else{
                insertRaplBefore(Bod->getLocStart(), rewriter);
              }
          //if void type
              if(FS->getReturnType().getAsString() == "void"){
                insertRaplAfter(Bod->getLocEnd(), rewriter);
              }
            }
        //Skip the Node if doesn't contain more than X Lines of code or RAPL already exists in the progamme
            else
              return false; 
          }
          else
            return false;

          return true;
        }

  //Add Braces to If and Else
        bool VisitIfStmt(IfStmt *i){
          Stmt *Then = i->getThen();
          insertBraces(Then, rewriter, Context);

          Stmt *Else = i->getElse();
          if(Else){
            if(isa<IfStmt>(Else))
              return true;

            insertBraces(Else, rewriter, Context);
          }

          return true;
        }

        //Return Visitor
        bool VisitReturnStmt(ReturnStmt *ret){
          if(ma==1){
            SourceManager &srcMgr = Context->getSourceManager();
            std::string st = getFileName(
              srcMgr.getFileEntryForID(srcMgr.getMainFileID())->getDir()->getName().str(),
              srcMgr.getFileEntryForID(srcMgr.getMainFileID())->tryGetRealPathName().str());
            unsigned found = st.find_last_of(".");
            st = st.substr(0, found);
            insertRaplAfter(ret->getReturnLoc(), rewriter);
            rewriter.InsertText(ret->getReturnLoc(), "writeMeasure(\""+st+"\"); \n", true, true);
          }
          else
            if(ret->getRetValue())
              insertRaplAfter(ret->getReturnLoc(), rewriter);
            else
              insertRaplAfter(ret->getLocStart(), rewriter);

            //ret->dump();

            return true;
          }

          bool VisitCallExpr(CallExpr *E){
            if(E->getDirectCallee()){
              const char *call_name = E->getDirectCallee()->getNameInfo().getName().getAsString().c_str();
              
              if(strcmp(call_name, funct_name.c_str())==0){
                //printf("\n%s \n-", call_name);
                //printf("%s \n-", funct_name.c_str());

                std::string s = std::to_string(nr_func);
                int aux = -1;
                auto parentNow = Context->getParents(*E).begin();
                
                const Stmt *ST = parentNow->get<Stmt>();
                const Decl *DC = parentNow->get<Decl>();
                const Stmt *STaux = cast<Stmt>(E);
                const Decl *DCaux = DC;
                SourceRange rang(STaux->getSourceRange());

                while(ST || DC){
                  if(ST){
                    aux = 0;
                    if(isa<CompoundStmt>(ST)){
                      printf("isa<CompoundStmt>(ST)\n");
                      break;
                    }
                    if(isa<ReturnStmt>(ST) || isa<SwitchCase>(ST) || isa<SwitchStmt>(ST)){
                      printf("isa<ReturnStmt>(ST)\n");
                      return true;
                    }
                      //if(isa<IfStmt>(ST) && cast<IfStmt>(ST)->getElse())
                        //return true;
                    if(Context->getParents(*ST).begin())
                      parentNow = Context->getParents(*ST).begin();
                    STaux = ST;
                  }
                  if(DC){
                    //DC->dump();
                    aux = 1;
                    if(Context->getParents(*DC).begin())
                      parentNow = Context->getParents(*DC).begin();
                    DCaux = DC;
                  }
                  if(parentNow){
                    ST = parentNow->get<Stmt>();
                    DC = parentNow->get<Decl>();
                  }
                }

                if(aux==0){
                  //ST->dump();


                  if(STaux != E){
                    //rang = CompareStmt(ST, STaux, Context->getSourceManager());
                    std::size_t found = SearchCloser(STaux->getLocEnd(), Context->getSourceManager(), "}");
                    rewriter.InsertText(STaux->getLocEnd().getLocWithOffset(found+1), "\nrapl_before(rapl);\n");
                  }
                  else{
                    std::size_t found = SearchCloser(E->getLocStart(), Context->getSourceManager(), "}");
                    rewriter.InsertText(E->getLocStart().getLocWithOffset(found+1), "\nrapl_before(rapl);\n");
                  }
                  SourceLocation prev = getPreviousLoc(ST, STaux, Context->getSourceManager());
                  rewriter.InsertText(prev, "\nrapl_after("+s+",rapl);\n", true, true);
                  
                    /*else{
                     bool invalid;
                     std::string str = Context->getSourceManager().getCharacterData(STaux->getLocEnd(), &invalid);
                     std::size_t found = str.find(";");
                     rang.setEnd(STaux->getLocEnd().getLocWithOffset(found+1));
                   }*/

                     //if(rang.isValid()){
                    /*bool invalid;
                    std::string str = Context->getSourceManager().getCharacterData(E->getLocEnd(), &invalid);
                    std::size_t found = str.find("break;");
                    if (found!=std::string::npos)
                      rewriter.InsertText(rang.getEnd().getLocWithOffset(found), "rapl_before(rapl);\n", true, true);
                    else*/
                    //rewriter.InsertText(rang.getBegin(), "rapl_after("+s+",rapl);\n", true, true);
                    //rewriter.InsertText(rang.getEnd(), "rapl_before(rapl);\n");

                  //}



                  }
                }
              }
            //wrapCall(E, Context, rewriter);

            //E->dump();
              return true;
            }

            bool VisitCXXThrowExpr(CXXThrowExpr *tr){
              insertRaplAfter(tr->getLocStart(), rewriter);
              return true;
            }

          private:
            ASTContext *Context;
            Rewriter &rewriter;
          };



          class FindNamedCallConsumer : public clang::ASTConsumer {  
          public:
            explicit FindNamedCallConsumer(ASTContext *Context, Rewriter &R)
            : Visitor(Context, R) {
              R.setSourceMgr(Context->getSourceManager(),
                Context->getLangOpts());
            }

            virtual void HandleTranslationUnit(clang::ASTContext &Context) {
              Visitor.TraverseDecl(Context.getTranslationUnitDecl());
            }

          private:
            RaplVisitor Visitor;
          };

          class FindNamedCallAction : public clang::ASTFrontendAction {  
          public:
            FindNamedCallAction() { }

            void EndSourceFileAction() override {
              if(!exist){
                SourceManager &SM = TheRewriter.getSourceMgr();
                TheRewriter.getEditBuffer(SM.getMainFileID()).write(llvm::outs());
                //llvm::outs();
                const char* st;

                if(Output.empty()){
          /*st = (getFileName(
            SM.getFileEntryForID(SM.getMainFileID())->getDir()->getName().str(),
            SM.getFileEntryForID(SM.getMainFileID())->tryGetRealPathName().str() 
            )
          ).c_str();*/
            st = SM.getFileEntryForID(SM.getMainFileID())->tryGetRealPathName().str().c_str();
          }
          else
            st = Output.c_str();

          StringRef file(st);
          std::error_code EC;
          llvm::raw_fd_ostream BOS(file, EC, llvm::sys::fs::F_None);

          BOS<< "#include <crapl/rapl_interface.h>\n"
          "#include <crapl/measures.h>\n";

          TheRewriter.getEditBuffer(SM.getMainFileID()).write(BOS);
        }
        exist = 0;
      }

      virtual std::unique_ptr<clang::ASTConsumer> CreateASTConsumer(
        clang::CompilerInstance &Compiler, llvm::StringRef InFile) {
        return std::unique_ptr<clang::ASTConsumer>(
          new FindNamedCallConsumer(&Compiler.getASTContext(), TheRewriter));
      }

    private:
      Rewriter TheRewriter;
    };


//Write the functions of the parsed progamme
    void writeIndex(){

      DIR* dir = opendir("CRapl_Gen");
      if (dir){
        closedir(dir);
      }
      else{
        system("mkdir CRapl_Gen");
      }

      std::ofstream myfile("CRapl_Gen/index.txt");
      for(auto const& value: name_funcs) {
        myfile << value + "\n";
      }

      myfile.close();
    }


//Get the files in directory if -d
/*std::vector<std::string>filesOfDirectory(char * direct){
  DIR *dpdf;
  struct dirent *epdf;
  std::vector<std::string> files_in;
  dpdf = opendir(direct);
  if (dpdf != NULL){
   while((epdf = readdir(dpdf))) {
    char *dot = strrchr(epdf->d_name, '.');
    if(dot)
      if((strcmp(dot, ".c") && strcmp(dot, ".cpp"))==0){
        char aux[50];
        strcpy(aux, direct);
        strcat(aux, epdf->d_name);
        files_in.push_back(aux);
      }
    }
  }
  return files_in;
}*/



  int main(int argc, const char **argv) {
  /*std::vector<std::string> files_in;
  std::vector<std::string> files_out;
  char *dir;
  char opt;

  while ((opt = getopt(argc, argv, "l:i:o:d:")) != -1)
  {
    switch (opt)
    {
      case 'l':
      min_lines = atoi(optarg);
      printf("Coise L \n");
      break;
      
      case 'i':
      files_in.push_back(optarg);
      printf("Coise I \n");
      break;

      case 'o':
      files_out.push_back(optarg);
      printf("Coise O \n");
      break;

      case 'd':
      dir = strdup(optarg);
      printf("Coise D \n");
      break;

      default:
      break;
    }
  }

  if(dir)
    files_in = files_out = filesOfDirectory(dir);

  const char** t = const_cast<const char**>(argv);
    */
  CommonOptionsParser op(argc, argv, ToolingSampleCategory);
  ClangTool Tool(op.getCompilations(), op.getSourcePathList());

  int result = Tool.run(newFrontendActionFactory<FindNamedCallAction>().get());

  writeIndex();

  printf("Number of functions with CRAPL: %d\n", nr_func+1);

  return result;
}
