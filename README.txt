************************************************ Clang Instrumentation + Version 2 ************************************************

Python Script:

python toCallgrind.py -i ../tinyxml/CRapl_Gen/index.txt -f ../tinyxml/CRapl_Gen/xmltest.txt -d tinyxml -o kache.txt -m main.txt
-i index
-f file with rapl results
-d directory
-o output file (callgrind format)
-m main function normalized


UPDATE (for all source files of xerces):
instru -l=5 -d="./" .cpp --
//for now to test

//Makefiles for xerces (there are 3)
RAPL:= /home/mario/Documentos/Rapl
INCS := -I$(RAPL)
RAPLSRCS := ${RAPL}/crapl/measures.o ${RAPL}/crapl/rapl_interface.o ${RAPL}/crapl/rapl.o
DEFAULT_INCLUDES = -I. -I$(top_builddir) -I$(top_builddir)/src/xercesc/util -I$(RAPL)
LDADD = ${top_builddir}/src/libxerces-c.la ${RAPLSRCS}



---- LLVM + Clang
Installation: http://clang.llvm.org/get_started.html


---- Configuration and building
mkdir build
cd build
cmake ..
make
sudo make install


---- Usage
cd ../Examples
instr -l=10 withoutRapl.cpp -o="withRapl.cpp" --
instr -l=10 -d="./" .cpp --
(index.txt is generated)


---- Example (withoutRapl.cpp)

--------------------------------------------------> need to include the header files
#include "../crapl/rapl_interface.h"
#include "../crapl/measures.h"
#include <stdio.h>
#include <stdlib.h>

void tantam();

void abc(){
 	CRapl rapl = create_rapl(0); 
	rapl_before(rapl); 
	int x = 1;
	int s = 0;
	rapl_after(0,rapl); 
}

int main() {
 	initMeasure(); 
 	CRapl rapl = create_rapl(0); 
	rapl_before(rapl); 
	int i = 0;
	for(i = 0; i < 10; i++){
		abc();
	}
	rapl_after(1,rapl);
	writeMeasure("programa"); 
	return 0; 
}


ADD THIS TO MAKEFILE OF THE PROJECT:

RAPL:= /home/mario/Documentos/Rapl
INCS := -I$(RAPL)
RAPLSRCS := ${RAPL}/crapl/measures.o ${RAPL}/crapl/rapl_interface.o ${RAPL}/crapl/rapl.o
SRCS := tinyxml.cpp tinyxmlparser.cpp xmltest.cpp tinyxmlerror.cpp tinystr.cpp ${RAPLSRCS}


************************************************ Example CRAPL ************************************************
1) sudo modprobe msr
2) make
3) cd ../Examples
4) make
5) sudo ./iteration
// Output.txt is generated with the energy measures per function
5) cd ..
6) cd Generated !


2 Files:
	index.txt  --- index of function/path+filename/line/column/function_name generated by Clang Instrumentation
	output.txt --- measures with index of the functions


Index.txt:
0:/home/mario/Área de Trabalho/Exemplos/ClangRapl/Examples/iteration.c:6:1:it
1:/home/mario/Área de Trabalho/Exemplos/ClangRapl/Examples/iteration.c:18:1:it2
2:/home/mario/Área de Trabalho/Exemplos/ClangRapl/Examples/iteration.c:30:1:main


Output.txt:
	events: package pp0 pp1 dram time
	fl=iteration.c 
	fn=0 
	calls=3 
	0.584534 	0.423828 	0.003540 	0.079346 	0.066917 	
	fn=1 
	calls=1 
	0.164795 	0.117310 	0.000366 	0.020264 	0.021595 	
	fn=2 
	calls=1 
	0.756897 	0.546570 	0.003967 	0.101074 	0.088968 	

